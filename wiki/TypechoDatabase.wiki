#labels Phase-Design
=Typecho数据库设计=

@author     qining
@copyright  Copyright (c) 2008 Typecho team (http://www.typecho.org)
@license    GNU General Public License 2.0
@version    $Id$

==主体结构==

===单用户博客数据量如何===

Typecho的定位是单用户blog系统,在我们设计它的数据库之前有必要对个人博客系统的负载情况做一些评估.我有一个朋友,是一个勤奋的blogger,alexa排名在十万以上,日IP在10w左右.他选择了wordpress作为主要系统,我们知道wordpress系统的一个主页乐观的估计也有20余次查询.但这依然无法阻挡这款程序的流行,在去年对全球top10 blogger所使用的系统调查中,wordpress比其他系统有着明显的优势.很显然,wordpress的负载是可控的.

当我们在设计一个单用户blog系统时,我们要时刻把*单用户*这三个字放在心上.单用户意味着数据的查询是很集中的,当一个用户页面的访问量比较小时,他几乎感觉不到这多出的几次查询带来多少延迟.而当访问量比较大时,他必然有实力去升级他的系统,而由于单用户系统的查询比较集中,我们可以通过部署文件缓存或者内存对象缓存来达到减轻数据库压力的目的,或者增加数据库数量来达到平滑的系统扩容.因此单用户系统设计重点在于灵活性和结构化,当我们集中地暴露系统瓶颈,从另一个方面也可以集中精力去解决它.

===6张表的设计===

让我们列举一下一个blog系统需要哪些元素,这样也可以让我们更好地设计数据库表.我们需要*文章,评论,分类,链接,用户*,现在的blog系统还需要*文件,标签,链接分类,多重分类*,如果我们考虑到系统的灵活性,我们还需要将所有的可配置选项放到一个表中,类似于wordpress的options表.

让我们来清点一下这些表.

# 文章表
# 评论表
# 文章分类表
# 标签表
# 链接表
# 链接分类表
# 文章与分类映射表(一对多)
# 文章与标签映射表(一对多)
# 配置表
# 用户表
# 文件表

一共11张表,虽然不是很多但是总觉得还有抽象的余地.当我们仔细观察它们之间的关系后

==数据字典==

===post表===

|| *键名* || *类型* || *属性* || *解释* ||
|| post_id || int(10) || 主键,非负,自增 || post表主键 ||
|| post_title || varchar(200) || 可为空 || 内容标题 ||
|| post_slug || varchar(128) || 索引,可为空 || 内容缩略名 ||
|| post_uri || varchar(200) || 可为空 || 内容链接 ||
|| post_time || int(11) || 非负,可为空 || 内容生成时的unix时间戳 ||
|| post_modify_time || int(11) || 非负,可为空 || 内容更改时的unix时间戳 ||
|| post_password || varchar(20) || 可为空 || 内容密码保护 ||
|| post_text || text || 可为空 || 内容文字 ||
|| user_id || int(10) || 索引,非负,可为空 || 内容所属用户id ||
|| post_template || varchar(32) || 可为空 || 内容使用的模板 ||
